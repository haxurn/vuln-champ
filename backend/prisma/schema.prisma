generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                 String               @id @default(cuid())
  name               String
  username           String               @unique
  email              String               @unique
  password           String
  points             Int                  @default(0)
  avatar             String?
  role               Role
  badges             Badge[]              @relation("UserBadges") // Add the reverse relation name here
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  vulnerabilities    Vulnerabilities[]
  leaderboard        Leaderboard[]
  notifications      Notification[]
  theme              Theme[]
  performance        UserPerformance[]
  generalLeaderboard GeneralLeaderboard[]
}

// Vulnerability Model
model Vulnerabilities {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  user             User     @relation(fields: [userId], references: [id])
  type             String
  severity         Severity
  dateFound        DateTime
  description      String
  shortDescription String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Leaderboard Model (Weekly Ranking)
model Leaderboard {
  id                   String   @id @default(cuid())
  weekStart            DateTime
  weekEnd              DateTime
  userId               String   @map("user_id")
  user                 User     @relation(fields: [userId], references: [id])
  rank                 Int
  totalPoints          Int      @default(0)
  vulnerabilitiesFound Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([weekStart, weekEnd, userId]) // Ensures unique ranking per user per week
}

// User Performance Model (Task Completion Tracking)
model UserPerformance {
  id             Int      @id @default(autoincrement())
  userId         String
  points         Int
  tasksCompleted Int
  completedAt    DateTime
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, completedAt]) // Ensures unique performance tracking per user per task
}

// Badge Model
model Badge {
  id             String   @id @default(cuid())
  name           String
  description    String
  image          String
  pointsRequired Int
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation("UserBadges", fields: [userId], references: [id]) // Reverse relation defined here
}

// Notification Model
model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  type      Type
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Type {
  alert
  message
  task
}

// Theme Model (User Preferences)
model Theme {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id])
  mode           Mode
  customSettings Json
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Mode {
  light
  dark
  system
}
// General Leaderboard (Cumulative Ranking)
model GeneralLeaderboard {
  id          String   @id @default(cuid())
  userId      String
  totalPoints Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId]) 
}

// Team Contributions Model
model TeamContribution {
  id                   String   @id @default(cuid())
  teamName             String
  totalVulnerabilities Int
  averageSeverity      Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum Role {
  admin
  user
}

enum Severity {
  low
  medium
  high
}
