openapi: 3.0.0
info:
  title: VulnChamp API
  description: API documentation for the VulnChamp platform.
  version: 1.0.0
  contact:
    name: Samson Tesfaye
    url: https://github.com/haxurn/vulnchamp
    email: samitesfaye726@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:4040/api
    description: Local development server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Use the JWT token in the `Authorization` header as `Bearer <token>` for authentication.

  schemas:
    User:
      type: object
      required:
        - username
        - password
        - role
      properties:
        username:
          type: string
          description: User's username or email.
          example: "johndoe"
        password:
          type: string
          description: User's password.
          example: "securePassword123"
        role:
          type: string
          description: User's role (e.g., 'admin', 'user').
          example: "user"

    LoginResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
              description: User's ID.
              example: "123"
            username:
              type: string
              description: User's username.
              example: "johndoe"
            role:
              type: string
              description: User's role (e.g., admin, user).
              example: "user"
        tokens:
          type: object
          properties:
            accessToken:
              type: string
              description: The access token granted to the user for subsequent requests.
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              description: The refresh token that can be used to obtain a new access token.
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token that needs to be used to generate a new access token.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AccessTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: The new access token after successful refresh.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  responses:
    UnauthorizedError:
      description: Unauthorized access, invalid or expired token.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized access, invalid or expired token."

    ForbiddenError:
      description: Forbidden access, user does not have admin privileges.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Forbidden access, user does not have admin privileges."

    NotFoundError:
      description: Resource not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "User not found."

paths:
  /user/login:
    post:
      summary: User login
      description: |
        This endpoint allows a user to log in by providing their username/email and password. 
        If authentication is successful, an access token and a refresh token are returned.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
                - password
              properties:
                identifier:
                  type: string
                  description: User's username or email address.
                  example: "johndoe"
                password:
                  type: string
                  description: User's password.
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful. Returns user details and tokens.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid or missing credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid credentials, please check your username/email or password."
        '401':
          description: Unauthorized access due to invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized: Invalid username/email or password."
        '500':
          description: Internal server error while processing the login request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred during login."

  /auth/refresh-token:
    post:
      summary: Refresh the access token using the refresh token.
      description: This route allows a user to refresh their access token by providing a valid refresh token. This is required if the access token has expired.
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Successfully refreshed the access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '400':
          description: Invalid or missing refresh token.
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /user/create:
    post:
      summary: Create a new user.
      description: This route allows an admin to create a new user by providing necessary user details. The password will be encrypted before being stored in the database, and the user will be assigned a role.
      operationId: createUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successfully created a new user with access and refresh tokens.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid input data.
        '409':
          description: Username or email already exists.

  /user/all:
    get:
      summary: Get all users.
      description: This route allows an admin to fetch all users from the system.
      operationId: getAllUsers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully fetched all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden access, user does not have admin privileges.
        '500':
          description: Internal server error.

  /user/get/{id}:
    get:
      summary: Get user details by ID.
      description: This route allows an authenticated user or admin to fetch the details of a user by their ID.
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to fetch.
      responses:
        '200':
          description: Successfully fetched the user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /user/update/{id}:
    put:
      summary: Update user details by ID.
      description: This route allows an authenticated user to update their own profile or an admin to update any user's profile.
      operationId: updateUserById
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully updated the user details.
        '403':
          description: Forbidden access, user cannot update another userâ€™s details.
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /user/delete/{id}:
    delete:
      summary: Delete user by ID.
      description: This route allows an admin to delete a user by their ID.
      operationId: deleteUserById
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to delete.
      responses:
        '204':
          description: Successfully deleted the user.
        '403':
          description: Forbidden access, user cannot delete another userâ€™s profile.
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
