import { prisma } from '../config/db.config';
import { z } from 'zod';
import { CreateVulnerabilityInput, UpdateVulnerabilityInput } from '../schemas/vulnerability.schema';

type CreateVulnerabilityInputType = z.infer<typeof CreateVulnerabilityInput>;
type UpdateVulnerabilityInputType = z.infer<typeof UpdateVulnerabilityInput>;

const createVulnerability = async (data: CreateVulnerabilityInputType) => {
  try {
    return await prisma.vulnerabilities.create({
      data: {
        ...data,
        date_found: new Date(),  
      },
    });
  } catch (error: unknown) {
    if (error instanceof Error) {
      throw new Error('Error creating vulnerability: ' + error.message);
    }
    throw new Error('Unknown error occurred');
  }
};



const getVulnerabilityById = async (id: string) => {
  try {
    return await prisma.vulnerabilities.findUnique({
      where: { id },
    });
  } catch (error: unknown) {
    if (error instanceof Error) {
      throw new Error('Error fetching vulnerability by ID: ' + error.message);
    }
    throw new Error('Unknown error occurred');
  }
};

const getAllVulnerabilities = async () => {
  try {
    return await prisma.vulnerabilities.findMany({
      select: {
        id: true,
        userId: true,
        type: true,
        severity: true,
        description: true,
        shortDescription: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  } catch (error: unknown) {
    if (error instanceof Error) {
      throw new Error('Error fetching all vulnerabilities: ' + error.message);
    }
    throw new Error('Unknown error occurred');
  }
};

const updateVulnerabilityById = async (id: string, data: UpdateVulnerabilityInputType) => {
  try {
    return await prisma.vulnerabilities.update({
      where: { id },
      data,
    });
  } catch (error: unknown) {
    if (error instanceof Error) {
      throw new Error('Error updating vulnerability: ' + error.message);
    }
    throw new Error('Unknown error occurred');
  }
};

const deleteVulnerabilityById = async (id: string) => {
  try {
    return await prisma.vulnerabilities.delete({
      where: { id },
    });
  } catch (error: unknown) {
    if (error instanceof Error) {
      throw new Error('Error deleting vulnerability: ' + error.message);
    }
    throw new Error('Unknown error occurred');
  }
};

export default {
  createVulnerability,
  getVulnerabilityById,
  getAllVulnerabilities,
  updateVulnerabilityById,
  deleteVulnerabilityById,
};
